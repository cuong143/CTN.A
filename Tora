local library = {flags = {}, windows = {}, open = true}

-- Services
local runService = game:GetService"RunService"
local tweenService = game:GetService"TweenService"
local textService = game:GetService"TextService"
local inputService = game:GetService"UserInputService"
local ui = Enum.UserInputType.MouseButton1

-- Locals
local dragging, dragStart, startPos, dragObject

-- Utility Functions
local function round(num, bracket) return math.floor(num/bracket + 0.5) * (bracket or 1) end
local function update(input)
    local delta = input.Position - dragStart
    local yPos = math.max(-29, startPos.Y.Offset + delta.Y) -- Giảm từ -36
    dragObject:TweenPosition(UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, yPos), "Out", "Quint", 0.1, true)
end

-- Rainbow Effect
local chromaColor
spawn(function()
    while wait(0.1) do chromaColor = Color3.fromHSV(tick() % 5 / 5, 1, 1) end
end)

function library:Create(class, properties)
    local inst = Instance.new(class)
    for k, v in pairs(properties or {}) do pcall(function() inst[k] = v end) end
    return inst
end

-- Create Option Holder
local function createOptionHolder(title, parent, parentTable, subHolder)
    local size = subHolder and 27 or 32 -- Giảm từ 34/40
    parentTable.main = library:Create("ImageButton", {
        LayoutOrder = subHolder and parentTable.position or 0,
        Position = UDim2.new(0, 16, 0, 16), -- Giảm từ 20
        Size = UDim2.new(0, 184, 0, size), -- Giảm từ 230
        BackgroundTransparency = 1,
        Image = "rbxassetid://3570695787",
        ImageColor3 = Color3.fromRGB(20, 20, 20),
        ScaleType = Enum.ScaleType.Slice,
        SliceCenter = Rect.new(100, 100, 100, 100),
        SliceScale = 0.032, -- Giảm từ 0.04
        ClipsDescendants = true,
        Parent = parent
    })

    local titleLabel = library:Create("TextLabel", {
        Size = UDim2.new(1, 0, 0, size),
        BackgroundTransparency = subHolder and 0 or 1,
        BackgroundColor3 = Color3.fromRGB(10, 10, 10),
        Text = title,
        TextSize = subHolder and 13 or 14, -- Giảm từ 16/17
        Font = Enum.Font.LuckiestGuy,
        TextColor3 = Color3.fromRGB(255, 255, 255),
        Parent = parentTable.main
    })

    local closeHolder = library:Create("Frame", {
        Position = UDim2.new(1, 0, 0, 0),
        Size = UDim2.new(-1, 0, 1, 0),
        SizeConstraint = Enum.SizeConstraint.RelativeYY,
        BackgroundTransparency = 1,
        Parent = titleLabel
    })

    local close = library:Create("ImageLabel", {
        AnchorPoint = Vector2.new(0.5, 0.5),
        Position = UDim2.new(0.5, 0, 0.5, 0),
        Size = UDim2.new(1, -size - 8, 1, -size - 8), -- Giảm từ -10
        Rotation = parentTable.open and 90 or 180,
        BackgroundTransparency = 1,
        Image = "rbxassetid://4918373417",
        ImageColor3 = parentTable.open and Color3.fromRGB(50, 50, 50) or Color3.fromRGB(30, 30, 30),
        ScaleType = Enum.ScaleType.Fit,
        Parent = closeHolder
    })

    parentTable.content = library:Create("Frame", {
        Position = UDim2.new(0, 0, 0, size),
        Size = UDim2.new(1, 0, 1, -size),
        BackgroundTransparency = 1,
        Parent = parentTable.main
    })

    local layout = library:Create("UIListLayout", {SortOrder = Enum.SortOrder.LayoutOrder, Parent = parentTable.content})

    layout.Changed:connect(function()
        parentTable.content.Size = UDim2.new(1, 0, 0, layout.AbsoluteContentSize.Y)
        parentTable.main.Size = #parentTable.options > 0 and parentTable.open and UDim2.new(0, 184, 0, layout.AbsoluteContentSize.Y + size) or UDim2.new(0, 184, 0, size)
    end)

    if not subHolder then
        titleLabel.InputBegan:connect(function(input)
            if input.UserInputType == ui or input.UserInputType == Enum.UserInputType.Touch then
                dragObject = parentTable.main
                dragging = true
                dragStart = input.Position
                startPos = dragObject.Position
            end
        end)
        titleLabel.InputChanged:connect(function(input)
            if dragging and (input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch) then
                update(input)
            end
        end)
        titleLabel.InputEnded:connect(function(input)
            if input.UserInputType == ui or input.UserInputType == Enum.UserInputType.Touch then dragging = false end
        end)
    end

    closeHolder.InputBegan:connect(function(input)
        if input.UserInputType == ui or input.UserInputType == Enum.UserInputType.Touch then
            parentTable.open = not parentTable.open
            tweenService:Create(close, TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {Rotation = parentTable.open and 90 or 180, ImageColor3 = parentTable.open and Color3.fromRGB(50, 50, 50) or Color3.fromRGB(30, 30, 30)}):Play()
            parentTable.main:TweenSize(#parentTable.options > 0 and parentTable.open and UDim2.new(0, 184, 0, layout.AbsoluteContentSize.Y + size) or UDim2.new(0, 184, 0, size), "Out", "Quad", 0.2, true)
        end
    end)

    function parentTable:SetTitle(newTitle) titleLabel.Text = tostring(newTitle) end
    return parentTable
end

-- Create Label
local function createLabel(option, parent)
    local main = library:Create("TextLabel", {
        LayoutOrder = option.position,
        Size = UDim2.new(1, 0, 0, 21), -- Giảm từ 26
        BackgroundTransparency = 1,
        Text = " " .. option.text,
        TextSize = 14, -- Giảm từ 17
        Font = Enum.Font.GothamBlack,
        TextColor3 = Color3.fromRGB(255, 255, 255),
        TextXAlignment = Enum.TextXAlignment.Left,
        Parent = parent.content
    })
    setmetatable(option, {__newindex = function(t, i, v) if i == "Text" then main.Text = " " .. tostring(v) end end})
end

-- Create Toggle
local function createToggle(option, parent)
    local main = library:Create("TextLabel", {
        LayoutOrder = option.position,
        Size = UDim2.new(1, 0, 0, 25), -- Giảm từ 31
        BackgroundTransparency = 1,
        Text = " " .. option.text,
        TextSize = 14, -- Giảm từ 17
        Font = Enum.Font.GothamBlack,
        TextColor3 = Color3.fromRGB(255, 255, 255),
        TextXAlignment = Enum.TextXAlignment.Left,
        Parent = parent.content
    })

    local tickboxOutline = library:Create("ImageLabel", {
        Position = UDim2.new(1, -5, 0, 3), -- Giảm từ -6, 4
        Size = UDim2.new(-1, 8, 1, -8), -- Giảm từ 10
        SizeConstraint = Enum.SizeConstraint.RelativeYY,
        BackgroundTransparency = 1,
        Image = "rbxassetid://3570695787",
        ImageColor3 = option.state and Color3.fromRGB(255, 65, 65) or Color3.fromRGB(100, 100, 100),
        ScaleType = Enum.ScaleType.Slice,
        SliceCenter = Rect.new(100, 100, 100, 100),
        SliceScale = 0.016, -- Giảm từ 0.02
        Parent = main
    })

    local tickboxInner = library:Create("ImageLabel", {
        Position = UDim2.new(0, 2, 0, 2),
        Size = UDim2.new(1, -4, 1, -4),
        BackgroundTransparency = 1,
        Image = "rbxassetid://3570695787",
        ImageColor3 = option.state and Color3.fromRGB(255, 65, 65) or Color3.fromRGB(20, 20, 20),
        ScaleType = Enum.ScaleType.Slice,
        SliceCenter = Rect.new(100, 100, 100, 100),
        SliceScale = 0.016,
        Parent = tickboxOutline
    })

    local checkmarkHolder = library:Create("Frame", {
        Position = UDim2.new(0, 3, 0, 3), -- Giảm từ 4
        Size = option.state and UDim2.new(1, -6, 1, -6) or UDim2.new(0, 0, 1, -6), -- Giảm từ -8
        BackgroundTransparency = 1,
        ClipsDescendants = true,
        Parent = tickboxOutline
    })

    local checkmark = library:Create("ImageLabel", {
        Size = UDim2.new(1, 0, 1, 0),
        SizeConstraint = Enum.SizeConstraint.RelativeYY,
        BackgroundTransparency = 1,
        Image = "rbxassetid://4919148038",
        ImageColor3 = Color3.fromRGB(20, 20, 20),
        Parent = checkmarkHolder
    })

    local inContact
    main.InputBegan:connect(function(input)
        if input.UserInputType == ui or input.UserInputType == Enum.UserInputType.Touch then
            option:SetState(not option.state)
        elseif input.UserInputType == Enum.UserInputType.MouseMovement then
            inContact = true
            if not option.state then
                tweenService:Create(tickboxOutline, TweenInfo.new(0.1), {ImageColor3 = Color3.fromRGB(140, 140, 140)}):Play()
            end
        end
    end)

    main.InputEnded:connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseMovement then
            inContact = false
            if not option.state then
                tweenService:Create(tickboxOutline, TweenInfo.new(0.1), {ImageColor3 = Color3.fromRGB(100, 100, 100)}):Play()
            end
        end
    end)

    function option:SetState(state)
        library.flags[self.flag] = state
        self.state = state
        checkmarkHolder:TweenSize(state and UDim2.new(1, -6, 1, -6) or UDim2.new(0, 0, 1, -6), "Out", "Quad", 0.2, true)
        tweenService:Create(tickboxInner, TweenInfo.new(0.2), {ImageColor3 = state and Color3.fromRGB(255, 65, 65) or Color3.fromRGB(20, 20, 20)}):Play()
        tweenService:Create(tickboxOutline, TweenInfo.new(0.2), {ImageColor3 = state and Color3.fromRGB(255, 65, 65) or (inContact and Color3.fromRGB(140, 140, 140) or Color3.fromRGB(100, 100, 100))}):Play()
        self.callback(state)
    end

    if option.state then delay(1, function() option.callback(true) end) end
    setmetatable(option, {__newindex = function(t, i, v) if i == "Text" then main.Text = " " .. tostring(v) end end})
end

-- Create Button
local function createButton(option, parent)
    local main = library:Create("TextLabel", {
        LayoutOrder = option.position,
        Size = UDim2.new(1, 0, 0, 27), -- Giảm từ 34
        BackgroundTransparency = 1,
        Text = " " .. option.text,
        TextSize = 14, -- Giảm từ 17
        Font = Enum.Font.GothamBlack,
        TextColor3 = Color3.fromRGB(255, 255, 255),
        Parent = parent.content
    })

    local round = library:Create("ImageLabel", {
        AnchorPoint = Vector2.new(0.5, 0.5),
        Position = UDim2.new(0.5, 0, 0.5, 0),
        Size = UDim2.new(1, -10, 1, -8), -- Giảm từ -12, -10
        BackgroundTransparency = 1,
        Image = "rbxassetid://3570695787",
        ImageColor3 = Color3.fromRGB(40, 40, 40),
        ScaleType = Enum.ScaleType.Slice,
        SliceCenter = Rect.new(100, 100, 100, 100),
        SliceScale = 0.016,
        Parent = main
    })

    local inContact, clicking
    main.InputBegan:connect(function(input)
        if input.UserInputType == ui or input.UserInputType == Enum.UserInputType.Touch then
            library.flags[option.flag] = true
            clicking = true
            tweenService:Create(round, TweenInfo.new(0.2), {ImageColor3 = Color3.fromRGB(255, 65, 65)}):Play()
            option.callback()
        elseif input.UserInputType == Enum.UserInputType.MouseMovement then
            inContact = true
            tweenService:Create(round, TweenInfo.new(0.1), {ImageColor3 = Color3.fromRGB(60, 60, 60)}):Play()
        end
    end)

    main.InputEnded:connect(function(input)
        if input.UserInputType == ui or input.UserInputType == Enum.UserInputType.Touch then
            clicking = false
            tweenService:Create(round, TweenInfo.new(0.2), {ImageColor3 = inContact and Color3.fromRGB(60, 60, 60) or Color3.fromRGB(40, 40, 40)}):Play()
        elseif input.UserInputType == Enum.UserInputType.MouseMovement then
            inContact = false
            if not clicking then
                tweenService:Create(round, TweenInfo.new(0.1), {ImageColor3 = Color3.fromRGB(40, 40, 40)}):Play()
            end
        end
    end)
end

-- Create Window
function library:CreateWindow(title)
    local window = {open = true, options = {}, position = #self.windows}
    table.insert(self.windows, window)
    createOptionHolder(title, self.base, window)

    function window:AddFolder(title)
        local folder = {open = true, options = {}, position = #self.options}
        table.insert(self.options, folder)
        createOptionHolder(title, self.content, folder, true)
        folder.AddToggle = self.AddToggle
        folder.AddButton = self.AddButton
        folder.AddLabel = self.AddLabel
        return folder
    end

    window.AddToggle = function(self, option)
        option = typeof(option) == "table" and option or {}
        option.flag = option.flag or "flag" .. tostring(#self.options)
        option.text = tostring(option.text) or "toggle"
        option.callback = option.callback or function() end
        option.state = option.state or false
        table.insert(self.options, option)
        createToggle(option, self)
    end

    window.AddButton = function(self, option)
        option = typeof(option) == "table" and option or {}
        option.flag = option.flag or "flag" .. tostring(#self.options)
        option.text = tostring(option.text) or "button"
        option.callback = option.callback or function() end
        table.insert(self.options, option)
        createButton(option, self)
    end

    window.AddLabel = function(self, option)
        option = typeof(option) == "table" and option or {}
        option.text = tostring(option.text) or "label"
        table.insert(self.options, option)
        createLabel(option, self)
    end

    return window
end

-- Initialize
function library:Init()
    self.base = library:Create("ScreenGui", {Parent = (syn and syn.protect_gui and syn.protect_gui(self.base) or get_hidden_gui and get_hidden_gui() or gethui and gethui() or game:GetService("CoreGui"))})
    for _, window in next, self.windows do window.main.Parent = self.base end
    inputService.InputChanged:connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseMovement and dragging then update(input) end
    end)
end

-- Close
function library:Close()
    self.open = not self.open
    for _, window in next, self.windows do window.main.Visible = self.open end
end

-- Anti-AFK
game:GetService("Players").LocalPlayer.Idled:connect(function()
    game:GetService("VirtualUser"):ClickButton2(Vector2.new())
end)

-- Example Usage for Dead Rails
local window = library:CreateWindow("Dead Rails GUI")
window:AddLabel({text = "Controls"})
window:AddToggle({
    text = "NoClip",
    state = false,
    callback = function(state)
        local player = game.Players.LocalPlayer
        local character = player.Character
        if character then
            for _, part in pairs(character:GetDescendants()) do
                if part:IsA("BasePart") then part.CanCollide = not state end
            end
        end
    end
})
window:AddButton({
    text = "Create Room",
    callback = function()
        local createEvent = game:GetService("ReplicatedStorage"):FindFirstChild("CreatePartyClient")
        if createEvent then
            createEvent:FireServer()
            print("Room creation triggered")
        else
            warn("CreatePartyClient not found")
        end
    end
})
library:Init()

-- Keybind Toggle
inputService.InputBegan:connect(function(input)
    if input.KeyCode == Enum.KeyCode.F1 then library:Close() end
end)
