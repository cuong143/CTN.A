local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")
local Workspace = game:GetService("Workspace")
local player = Players.LocalPlayer
local noclipEnabled = false
local camlockEnabled = false
local hitboxToggleEnabled = false

-- Biến cho NPC Camlock và Hitbox
local cam = Workspace.CurrentCamera
local camlockConnection
local targetESP = nil
local defaultHRPValues = {}
local trackedNPCs = {}
local targetHead = nil
local lastTargetUpdate = 0
local targetUpdateInterval = 0.1

-- Hàm gửi thông báo
local function sendNotification(title, text, duration)
    pcall(function()
        game.StarterGui:SetCore("SendNotification", {
            Title = title,
            Text = text,
            Duration = duration or 4
        })
    end)
end

-- Tải Tora Library
local success, library = pcall(function()
    return loadstring(game:HttpGet("https://raw.githubusercontent.com/liebertsx/Tora-Library/main/src/librarynew", true))()
end)

if not success or not library then
    sendNotification("Error", "Failed to load Tora Library", 5)
    return
end

-- Tạo UI
local window = library:CreateWindow("DEAD RAILS ")

-- Hàm kiểm tra nhân vật
local function checkCharacter()
    return player.Character and player.Character:FindFirstChild("Humanoid")
end

-- Hàm bật/tắt noclip
local function toggleNoclip()
    if not checkCharacter() then
        sendNotification("Error", "Nhân vật chưa load hoặc đã chết!", 4)
        return
    end

    noclipEnabled = not noclipEnabled
    local character = player.Character
    for _, part in pairs(character:GetDescendants()) do
        if part:IsA("BasePart") then
            part.CanCollide = not noclipEnabled
        end
    end
    sendNotification("NoClip Status", "NoClip is now " .. (noclipEnabled and "Enabled" or "Disabled"), 4)
end

-- Giữ noclip ổn định
RunService.Stepped:Connect(function()
    if noclipEnabled and checkCharacter() then
        for _, part in pairs(player.Character:GetDescendants()) do
            if part:IsA("BasePart") then
                part.CanCollide = false
            end
        end
    end
end)

-- Bật lại noclip sau respawn
player.CharacterAdded:Connect(function(character)
    if noclipEnabled then
        wait(0.5)
        for _, part in pairs(character:GetDescendants()) do
            if part:IsA("BasePart") then
                part.CanCollide = false
            end
        end
        sendNotification("NoClip Restored", "NoClip vẫn bật sau khi respawn!", 4)
    end
end)

-- Hàm tạo ESP cho NPC Camlock
local function createESP(target)
    if target and target.Parent then
        if targetESP then targetESP:Destroy() end
        targetESP = Instance.new("Highlight")
        targetESP.FillTransparency = 1
        targetESP.OutlineColor = Color3.fromRGB(255, 0, 0)
        targetESP.OutlineTransparency = 0
        targetESP.Parent = target.Parent
    end
end

-- Hàm xóa ESP
local function removeESP()
    if targetESP then
        targetESP:Destroy()
        targetESP = nil
    end
end

-- Hàm kiểm tra tầm nhìn rõ ràng
local function hasClearLineOfSight(targetHead)
    local origin = cam.CFrame.Position
    local direction = (targetHead.Position - origin).unit * (targetHead.Position - origin).Magnitude
    local raycastParams = RaycastParams.new()
    raycastParams.FilterType = Enum.RaycastFilterType.Blacklist
    raycastParams.FilterDescendantsInstances = {player.Character}
    
    local result = Workspace:Raycast(origin, direction, raycastParams)
    return result == nil or result.Instance:IsDescendantOf(targetHead.Parent)
end

-- Hàm tìm NPC gần nhất
local function getClosestNPCTarget()
    local character = player.Character
    if not character or not character:FindFirstChild("HumanoidRootPart") then
        return nil
    end

    local closestNPCHead = nil
    local shortestDistance = math.huge

    for npc, _ in pairs(trackedNPCs) do
        if npc and npc.Parent then
            local humanoid = npc:FindFirstChild("Humanoid")
            local head = npc:FindFirstChild("Head")
            if humanoid and head then
                local distance = (head.Position - character.HumanoidRootPart.Position).Magnitude
                if distance <= 330
                   and humanoid.Health > 0
                   and humanoid:GetState() ~= Enum.HumanoidStateType.Dead
                   and distance < shortestDistance
                   and hasClearLineOfSight(head) then
                    shortestDistance = distance
                    closestNPCHead = head
                end
            else
                trackedNPCs[npc] = nil
            end
        end
    end

    return closestNPCHead
end

-- Hàm bắt đầu Camlock
local function startCamlock()
    camlockConnection = RunService.RenderStepped:Connect(function()
        local currentTime = tick()
        if currentTime - lastTargetUpdate >= targetUpdateInterval then
            targetHead = getClosestNPCTarget()
            lastTargetUpdate = currentTime
        end

        if targetHead then
            local distance = (targetHead.Position - cam.CFrame.Position).Magnitude
            if distance > 300 then
                removeESP()
            else
                local heightCompensation = math.clamp(distance * 0, 0.2, 1.8)
                local headPos = targetHead.Position + Vector3.new(0, targetHead.Size.Y / 2 - heightCompensation, 0)
                local camPos = cam.CFrame.Position
                local direction = (headPos - camPos).unit
                local newCF = CFrame.lookAt(camPos, camPos + direction)
                cam.CFrame = newCF
                createESP(targetHead)
            end
        else
            removeESP()
        end
    end)
end

-- Hàm dừng Camlock
local function stopCamlock()
    if camlockConnection then
        camlockConnection:Disconnect()
        camlockConnection = nil
    end
    removeESP()
end

-- Hàm bật/tắt NPC Camlock
local function toggleCamlock()
    if not checkCharacter() then
        sendNotification("Error", "Nhân vật chưa load hoặc đã chết!", 4)
        return
    end

    camlockEnabled = not camlockEnabled
    if camlockEnabled then
        startCamlock()
        sendNotification("Camlock Status", "NPC Camlock is now Enabled", 4)
    else
        stopCamlock()
        sendNotification("Camlock Status", "NPC Camlock is now Disabled", 4)
    end
end

-- Hàm cập nhật hitbox cho một NPC
local function updateNPCHitbox(npc)
    if npc:IsA("Model") and npc:FindFirstChild("Humanoid") and npc:FindFirstChild("HumanoidRootPart") then
        if Players:GetPlayerFromCharacter(npc) or npc.Name == "Horse" then
            return
        end

        local humanoid = npc.Humanoid
        local hrp = npc.HumanoidRootPart

        if defaultHRPValues[hrp] == nil then
            defaultHRPValues[hrp] = {
                Size = hrp.Size,
                Transparency = hrp.Transparency,
                CanCollide = hrp.CanCollide
            }
        end

        if humanoid.Health <= 0 then
            local defaults = defaultHRPValues[hrp]
            if defaults then
                hrp.Size = defaults.Size
                hrp.Transparency = defaults.Transparency
                hrp.CanCollide = defaults.CanCollide
            end
            return
        end

        if hitboxToggleEnabled then
            hrp.Size = Vector3.new(10, 10, 10)
            hrp.Transparency = 0.85
            hrp.CanCollide = false
        else
            local defaults = defaultHRPValues[hrp]
            if defaults then
                hrp.Size = defaults.Size
                hrp.Transparency = defaults.Transparency
                hrp.CanCollide = defaults.CanCollide
            end
        end
    end
end

-- Hàm cập nhật hitbox cho tất cả NPC
local function updateAllNPCsHitbox()
    for _, obj in ipairs(Workspace:GetDescendants()) do
        if obj:IsA("Model")
           and obj:FindFirstChild("HumanoidRootPart")
           and obj:FindFirstChild("Humanoid")
           and not Players:GetPlayerFromCharacter(obj) then
            updateNPCHitbox(obj)
        end
    end
end

-- Hàm bật/tắt NPC Hitbox
local function toggleHitbox()
    if not checkCharacter() then
        sendNotification("Error", "Nhân vật chưa load hoặc đã chết!", 4)
        return
    end

    hitboxToggleEnabled = not hitboxToggleEnabled
    updateAllNPCsHitbox()
    sendNotification("Hitbox Status", "NPC Hitbox is now " .. (hitboxToggleEnabled and "Enabled" or "Disabled"), 4)
end

-- Khởi tạo NPC ban đầu
for _, obj in ipairs(Workspace:GetDescendants()) do
    if obj:IsA("Model")
       and obj:FindFirstChild("Humanoid")
       and obj:FindFirstChild("HumanoidRootPart")
       and not Players:GetPlayerFromCharacter(obj)
       and obj.Name ~= "Horse" then
        trackedNPCs[obj] = true
        local hrp = obj.HumanoidRootPart
        if defaultHRPValues[hrp] == nil then
            defaultHRPValues[hrp] = {
                Size = hrp.Size,
                Transparency = hrp.Transparency,
                CanCollide = hrp.CanCollide
            }
        end
    end
end

-- Theo dõi NPC mới
Workspace.DescendantAdded:Connect(function(obj)
    if obj:IsA("Model") then
        local humanoid = obj:FindFirstChild("Humanoid") or obj:WaitForChild("Humanoid", 5)
        if humanoid then
            local hrp = obj:FindFirstChild("HumanoidRootPart") or obj:WaitForChild("HumanoidRootPart", 5)
            if hrp and not Players:GetPlayerFromCharacter(obj) and obj.Name ~= "Horse" then
                trackedNPCs[obj] = true
                if defaultHRPValues[hrp] == nil then
                    defaultHRPValues[hrp] = {
                        Size = hrp.Size,
                        Transparency = hrp.Transparency,
                        CanCollide = hrp.CanCollide
                    }
                end
                task.wait(0.5)
                updateNPCHitbox(obj)
            end
        end
    end
end)

-- Xóa NPC khỏi danh sách khi bị xóa
Workspace.DescendantRemoving:Connect(function(obj)
    if trackedNPCs[obj] then
        trackedNPCs[obj] = nil
    end
end)

-- Reset hitbox khi NPC chết
spawn(function()
    while task.wait(1) do
        for npc, _ in pairs(trackedNPCs) do
            if npc and npc.Parent then
                local humanoid = npc:FindFirstChild("Humanoid")
                local hrp = npc:FindFirstChild("HumanoidRootPart")
                if humanoid and hrp and humanoid.Health <= 0 then
                    local defaults = defaultHRPValues[hrp]
                    if defaults then
                        hrp.Size = defaults.Size
                        hrp.Transparency = defaults.Transparency
                        hrp.CanCollide = defaults.CanCollide
                    end
                end
            else
                trackedNPCs[npc] = nil
            end
        end
    end
end)

-- Nút NoClip
window:AddButton({
    text = "NoClip",
    callback = toggleNoclip
})

-- Nút NPC Camlock
window:AddButton({
    text = "NPC Camlock",
    callback = toggleCamlock
})

-- Nút NPC Hitbox
window:AddButton({
    text = "NPC Hitbox",
    callback = toggleHitbox
})

-- Nút Monster Lock
window:AddButton({
    text = "Monster Lock Aimbot",
    callback = function()
        loadstring(game:HttpGet("https://raw.githubusercontent.com/cuong143/CTN.A/refs/heads/main/Monster%20lock"))()
    end
})

-- Nút Aim FOV
window:AddButton({
    text = "Aim + FOV",
    callback = function()
        loadstring(game:HttpGet("https://raw.githubusercontent.com/cuong143/CTN.A/refs/heads/main/Aim"))()
    end
})

-- Nút Unlock Class
window:AddButton({
    text = "Unlock Class",
    callback = function()
        loadstring(game:HttpGet("https://raw.githubusercontent.com/cuong143/CTN.A/refs/heads/main/Unlock%20class"))()
    end
})

-- Nhãn tín dụng
window:AddLabel({ text = "script by CTNA", type = "label" })

-- Khởi tạo UI
library:Init()

sendNotification("CTNA Ready", "Các chức năng đã sẵn sàng!", 5)
